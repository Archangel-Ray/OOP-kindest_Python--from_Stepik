# You need to write a program to work with an array of data of the same type (for example, only numbers or strings,
# etc.). To do this, you need to declare a class named Array, whose objects are created by the command:
#
# ar = Array(max_length, cells)
#
# where max_length is the maximum number of elements in the array; cell - a reference to a class that describes
# a single element of this array (see below, the Integer class). The initial values ​​in the cells of the array
# (in objects of class Integer) must be equal to 0.
#
# To work with integers, declare another class in the program called Integer, whose objects are created by the command:
#
# cell = Integer(start_value)
#
# where start_value is the starting value of the cell (in this case, an integer).
#
# The Integer class must have the following property:
#
# value - to change and read the value from the cell (the value itself is stored in a local private variable;
# think up the name yourself).
#
# When trying to assign a non-integer number, an exception should be generated by the command:
#
# raise ValueError('must be an integer')
#
# To access individual array elements in the Array class,
# you must define a set of magic methods for the following operations:
#
# value = ar[0] # getting the value from the first element (cell) of the ar array
# ar[1] = value # writing a new value to the second cell of the array ar
#
# If the index is not an integer, or if the number is less than zero or greater than or equal to max_length,
# then an exception must be thrown with the command:
#
# raise IndexError('invalid index for accessing array elements')
#
# An example of using classes (do not write these lines in the program):
#
# ar_int = Array(10, cell=Integer)
# print(ar_int[3])
# print(ar_int) # all array values ​​should be displayed in one line separated by a space
# ar_int[1] = 10
# ar_int[1] = 10.5 # should throw a ValueError exception
# ar_int[10] = 1 # should throw an IndexError exception


class Integer:
    def __init__(self, start_value=0):
        self.__total = start_value

    @property
    def total(self):
        return self.__total

    @total.setter
    def total(self, value):
        if type(value) != int:
            raise ValueError("must be an integer")
        self.__total = value

    def __repr__(self):
        return str(self.__total)


class Array:
    def __init__(self, max_length, cell):
        self.__max_length = max_length
        self.__cell = cell
        self.__array = [self.__cell() for _ in range(self.__max_length)]

    def __check(self, indx):
        if type(indx) != int or not (-self.__max_length <= indx < self.__max_length):
            raise IndexError("invalid index to access array elements")

    def __getitem__(self, item):
        self.__check(item)
        return self.__array[item].total

    def __setitem__(self, key, value):
        self.__check(key)
        self.__array[key].total = value

    def __repr__(self):
        return " ".join(map(str, self.__array))


ar_int = Array(10, cell=Integer)
ar_int[1] = 10
print(ar_int[3])
print(ar_int)
# ar_int[1] = 10.5
ar_int[10] = 1
