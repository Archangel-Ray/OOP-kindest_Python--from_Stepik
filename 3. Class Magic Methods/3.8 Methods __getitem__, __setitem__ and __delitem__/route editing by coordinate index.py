# You need to implement the definition of routes for the navigator. To do this, you need to declare the Track class
# in the program, the objects of which are created by the command:
#
# tr = Track(start_x, start_y)
#
# where start_x, start_y are the coordinates of the beginning of the path.
#
# This class must implement the following method:
#
# add_point(x, y, speed) - adding a new waypoint (line segment) that can be passed at an average speed of speed.
#
# The following commands must also be executed with objects of the Track class:
#
# coord, speed = tr[indx] # getting coordinate (tuple with two numbers) and speed (number)
# for the linear segment of the route with index indx
# tr[indx] = speed # changing the average speed of the linear section of the route by index indx
#
# If the index (indx) is specified incorrectly (should be an integer from 0 to N-1, where N is the number
# of line segments in the route), then an exception is generated by the command:
#
# raise IndexError('invalid index')
#
# An example of using the class (do not write these lines in the program):
#
# tr = Track(10, -5.4)
# tr.add_point(20, 0, 100) # first line segment: indx = 0
# tr.add_point(50, -20, 80) # second line segment: indx = 1
# tr.add_point(63.45, 1.24, 60.34) # third line segment: indx = 2
#
# tr[2] = 60
# c, s = tr[2]
# print(c, s)
#
# res = tr[3] #IndexError


class Track:
    def __init__(self, start_x, start_y):
        self.start_x = start_x
        self.start_y = start_y
        self.track = []

    def add_point(self, x, y, speed):
        self.track.append([x, y, speed])

    def __check_coord(self, item):
        if item < 0 or item > len(self.track) - 1:
            raise IndexError("incorrect index")

    def __getitem__(self, item):
        self.__check_coord(item)
        return tuple(self.track[item][:2]), self.track[item][-1]

    def __setitem__(self, key, value):
        self.__check_coord(key)
        self.track[key][-1] = value


tr = Track(10, -5.4)
tr.add_point(20, 0, 100)
tr.add_point(50, -20, 80)
tr.add_point(63.45, 1.24, 60.34)

tr[2] = 60
c, s = tr[2]
print(c, s)

res = tr[3]
