# Declare a class named Dimensions whose objects are created by the command:
#
# d = Dimensions(a, b, c)
#
# where a, b, c are positive numbers (integer or real), describing the dimensions of some body: height, width and depth.
#
# Each object of class Dimensions must have similar public attributes a, b, c (with corresponding numerical values).
# Also, for each object, a hash must be calculated based on all three dimensions: a, b, c.
#
# Using the input() function, read from the input stream a line written in the format:
#
# 'a1 b1 c1; a2 b2 c2; ... ;aN bN cN'
#
# For example:
#
# '1 2 3; 4 5 6.78; 1 2 3; 0 1 2.5'
#
# If any dimension turns out to be a negative value or equal to zero, then when creating objects,
# an error should be generated by the command:
#
# raise ValueError('overall dimensions must be positive numbers')
#
# Based on the read line, form a list of lst_dims from objects of the Dimensions class. After that, sort this list
# in ascending (non-decreasing) hashes of these objects so that objects with equal hashes are next to each other.


class Dimensions:
    def __init__(self, a, b, c):
        self.check(a, b, c)
        self.a = a
        self.b = b
        self.c = c

    def __hash__(self):
        return hash((self.a, self.b, self.c))

    def check(self, a, b, c):
        if a * b * c <= 0:
            raise ValueError("overall dimensions must be positive numbers")


s_inp = input()

lst_dims = []
for dim_obj in s_inp.split(";"):
    lst_dims.append(Dimensions(*(float(x) for x in dim_obj.split())))
lst_dims.sort(key=hash)
print(lst_dims)
