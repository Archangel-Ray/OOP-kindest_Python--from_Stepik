# Declare the Vector class in the program, the objects of which are created by the command:
#
# v = Vector(x1, x2, x3,..., xN)
#
# where x1, x2, x3,..., xN - vector coordinates (numbers: integer or real).
#
# The following statements must be executed with each object of the Vector class:
#
# v1 + v2 # summation of corresponding vector coordinates
# v1 - v2 # subtract corresponding vector coordinates
# v1 * v2 # multiply corresponding vector coordinates
#
# v1 += 10 # add 10 to all vector coordinates
# v1 -= 10 # subtract the number 10 from all coordinates of the vector
# v1 += v2
# v2 -= v1
#
# v1 == v2 # True if corresponding vector coordinates are equal
# v1 != v2 # True if at least one pair of vector coordinates does not match
#
# When implementing the binary operators +, -, *, you should create new objects of the Vector class with new (computed)
# coordinates. When implementing the +=, -= operators, the coordinates are changed in the current object
# without creating a new one.
#
# If the number of coordinates (dimension) of the vectors v1 and v2 does not match,
# then with the operators +, -, * an exception should be generated by the command:
#
# raise ArithmeticError('vector dimensions do not match')


class Vector:
    def __init__(self, *args):
        self.vector = list(args)

    def validate(self, other):
        if len(self.vector) == len(other.vector):
            return True
        raise ArithmeticError('the dimensions of the vectors do not match')

    def __add__(self, other):
        self.validate(other)
        res = []
        for i in range(len(self.vector)):
            res.append(self.vector[i] + other.vector[i])
        return Vector(*res)

    def __iadd__(self, other):
        if type(self) == type(other):
            self.validate(other)
            res = []
            for i in range(len(self.vector)):
                res.append(self.vector[i] + other.vector[i])
            self.vector = res
            return self
        if type(other) == int:
            res = []
            for i in range(len(self.vector)):
                res.append(self.vector[i] + other)
            self.vector = res
            return self

    def __sub__(self, other):
        self.validate(other)
        res = []
        for i in range(len(self.vector)):
            res.append(self.vector[i] - other.vector[i])
        return Vector(*res)

    def __isub__(self, other):
        if type(self) == type(other):
            self.validate(other)
            res = []
            for i in range(len(self.vector)):
                res.append(self.vector[i] - other.vector[i])
            self.vector = res
            return self
        if type(other) == int:
            res = []
            for i in range(len(self.vector)):
                res.append(self.vector[i] - other)
            self.vector = res
            return self

    def __mul__(self, other):
        self.validate(other)
        res = []
        for i in range(len(self.vector)):
            res.append(self.vector[i] * other.vector[i])
        return Vector(*res)

    def __eq__(self, other):
        return self.vector == other.vector


v1 = Vector(1, 2, 3)
v2 = Vector(4, 5, 6)
v_sum = v1 + v2
print(v_sum.vector)  # [5, 7, 9]
v_sub = v1 - v2
print(v_sub.vector)  # [-3, -3, -3]
v_mul = v1 * v2
print(v_mul.vector)  # [4, 10, 18]

v1 += v2
print(v1.vector)  # [5, 7, 9]
v1 += 10
print(v1.vector)  # [11, 12, 13]
v2 -= v1
print(v2.vector)  # [-1, -2, -3]
v1 -= 10
print(v1.vector)  # [1, 2, 3]

v1.vector = v2.vector
print(v1 == v2)  # False
print(v1 != v2)  # True
print()
