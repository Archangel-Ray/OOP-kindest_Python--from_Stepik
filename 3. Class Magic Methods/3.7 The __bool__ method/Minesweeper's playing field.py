# You start to develop the Minesweeper game. To do this, you need to be able to represent and manage the playing field.
# We will assume that it has dimensions of N x M cells. Each cell will be represented by an object of the Cell class
# and contain either the number of mines around this cell, or the mine itself.
#
# First, declare the GamePole class in the program, which will create and manage the playing field.
# An object of this class must be formed with the command:
#
# pole = GamePole(N, M, total_mines)
#
# And, since there is only one field in the game, you need to control the creation of only one object of the GamePole
# class (use the Singleton pattern, which we talked about when we considered the __new__() magic method).
#
# The pole object must have a local private attribute:
#
# __pole_cells is a two-dimensional (nested) tuple of size N x M elements (N rows and M columns)
# consisting of objects of the Cell class.
#
# To access this collection, declare a property object in the GamePole class:
#
# pole is a read-only (get) reference to the __pole_cells collection.
#
# Next, in the GamePole class itself, declare the following methods:
#
# init_pole() - to initialize the initial state of the playing field (places mines and makes all cells closed);
# open_cell(i, j) - opens a cell with indices (i, j); index numbering starts from zero; the method changes
# the value of the __is_open attribute of the Cell object in cell (i, j) to True;
# show_pole() - displays the playing field in the console (how exactly to do it is up to you, this method is homework).
#
# Arrange mines randomly on the playing field (for this, it is convenient to use the randint function
# of the random module). After placing all total_mines of mines, calculate their number around the rest of the cells
# (where there are no mines). Coverage area - neighboring (adjacent) cells (8 pieces).
#
# In the open_cell() method, it is necessary to check the correctness of the indices (i, j). If the indexes
# are specified incorrectly, then an exception is generated by the command:
#
# raise IndexError('incorrect indexes i, j of playing field cell')
#
# The following Cell class describes the state of one cell of the playing field.
# Objects of this class are created by the command:
#
# cell = Cell()
#
# In this case, the following local private properties are created in the object itself:
#
# __is_mine - Boolean value True/False; True - there is a mine in the cell, False - there is no mine;
# __number - number of mines around the cell (integer from 0 to 8);
# __is_open - flag of whether the cell is open or closed: True - open; False - closed.
#
# To work with these private attributes, declare the following named property objects in the Cell class:
#
# is_mine - for writing and reading information from the __is_mine attribute;
# number - for writing and reading information from the __number attribute;
# is_open - for writing and reading information from the __is_open attribute.
#
# In these properties, it is necessary to check for the correctness of the passed values ​​(either a Boolean True/False
# value, or an integer from 0 to 8). If the passed value is incorrect, then throw an exception with the command:
#
# raise ValueError('invalid attribute value')
#
# The following function should work with objects of the Cell class:
#
# bool(cell)
#
# which returns True if the cell is closed and False if it is open.
#
# An example of using classes (you do not need to write these lines in the program):
#
# pole = GamePole(10, 20, 10) # creates a 10x20 field with a total of 10 mins
# pole.init_pole()
# if pole.pole[0][1]:
# pole.open_cell(0, 1)
# if pole.pole[3][5]:
# pole.open_cell(3, 5)
# pole.open_cell(30, 100) # throws an IndexError exception
# pole.show_pole()
from random import randint


class Cell:
    def __init__(self):
        self.__is_mine = False
        self.__number = 0
        self.__is_open = False

    @property
    def is_mine(self):
        return self.__is_mine

    @is_mine.setter
    def is_mine(self, value):
        if type(value) == bool:
            self.__is_mine = value
        else:
            raise ValueError("invalid attribute value")

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        if type(value) == int or 0 <= value <= 8:
            self.__number = value
        else:
            raise ValueError("invalid attribute value")

    @property
    def is_open(self):
        return self.__is_open

    @is_open.setter
    def is_open(self, value):
        if type(value) == bool:
            self.__is_open = value
        else:
            raise ValueError("invalid attribute value")

    def __bool__(self):
        return not self.is_open


class GamePole:
    __instance = None

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)

        return cls.__instance

    def __del__(self):
        GamePole.__instance = None

    def __init__(self, N, M, total_mines):
        self.__n = N
        self.__m = M
        self.total_mines = total_mines
        self.__pole_cells = tuple(tuple(Cell() for _ in range(M)) for _ in range(N))
        self.init_pole()

    @property
    def pole(self):
        return self.__pole_cells

    def init_pole(self):
        for row in self.__pole_cells:
            for x in row:
                x.is_open = False
                x.is_mine = False

        count_mine = 0
        while count_mine < self.total_mines:
            i = randint(0, self.__n - 1)
            j = randint(0, self.__m - 1)
            if self.__pole_cells[i][j].is_mine:
                continue
            self.__pole_cells[i][j].is_mine = True
            count_mine += 1

        indexes_around = (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)
        for x in range(self.__n):
            for y in range(self.__m):
                if not self.pole[x][y].is_mine:
                    mines_nearby = sum(self.pole[x + i][y + j].is_mine for i, j in indexes_around
                                       if 0 <= x + i < self.__n and 0 <= y + j < self.__m)
                    self.pole[x][y].number = mines_nearby

    def open_cell(self, i, j):
        if not 0 <= i < self.__n or not 0 <= j < self.__m:
            raise IndexError('incorrect indices i, j of playing field cells')
        self.pole[i][j].is_open = True

    def show_pole(self):
        for string in self.pole:
            print(*map(lambda x: '#' if not x.is_open else x.number if not x.is_mine else '*', string))


pole = GamePole(10, 12, 8)
pole.init_pole()
if pole.pole[0][1]:
    pole.open_cell(0, 1)
if pole.pole[3][5]:
    pole.open_cell(3, 5)
pole.open_cell(30, 100)
pole.show_pole()
pole.show_pole()
