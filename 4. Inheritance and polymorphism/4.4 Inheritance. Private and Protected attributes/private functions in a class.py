# Declare a class Furniture (furniture), whose objects are created by the command:
#
# f = Furniture(name, weight)
#
# where name - item name (string); weight - item weight (integer or real number).
#
# Protected local attributes named _name and _weight must be created on each object of class Furniture.
# In the Furniture class itself, you need to declare private methods:
#
# __verify_name() - to check the correctness of the name;
# __verify_weight() - to check if the weight is correct.
#
# The __verify_name() method checks that the name must be a string,
# if it is not, then an exception is thrown with the command:
#
# raise TypeError('name must be a string')
#
# The __verify_weight() method checks that the weight must be a positive number (strictly greater than zero),
# if it is not, then an exception is generated by the command:
#
# raise TypeError('weight must be a positive number')
#
# These methods should be called whenever new values ​​are written to the _name and _weight attributes
# (and also when they are created).
#
# Based on the base class Furniture, declare the following child classes:
#
# Closet - to represent cabinets;
# Chair - to represent chairs;
# Table - to represent tables.
#
# Objects of these classes must be created with the commands:
#
# obj = Closet(name, weight, tp, doors) # tp: True - wardrobe; False - normal closet; doors - number of doors (integer)
# obj = Chair(name, weight, height) # height - chair height (any positive number)
# obj = Table(name, weight, height, square) # height - table height; square - surface area (any positive numbers)
#
# In each object of these classes, the corresponding protected attributes must be created:
#
# - in objects of class Closet: _name, _weight, _tp, _doors
# - in Chair class objects: _name, _weight, _height
# - in Table class objects: _name, _weight, _height, _square
#
# In each class (Closet, Chair, Table) declare a method:
#
# get_attrs()
#
# which returns a tuple of the values ​​of the local protected attributes of the objects of these classes.
#
# An example of using classes (you do not need to write these lines in the program):
#
# cl = Closet('closet', 342.56, True, 3)
# chair = Chair('chair', 14, 55.6)
# tb = Table('table', 34.5, 75, 10)
# print(tb.get_attrs())


class Furniture:
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self.__verify_name(value)
        self._name = value

    @property
    def weight(self):
        return self._weight

    @weight.setter
    def weight(self, value):
        self.__verify_weight(value)
        self._weight = value

    @staticmethod
    def __verify_name(value):
        if type(value) != str:
            raise TypeError("title must be a string")

    @staticmethod
    def __verify_weight(value):
        if value <= 0:
            raise TypeError("weight must be a positive number")

    def get_attrs(self):
        return tuple(val for val in self.__dict__.values())


class Closet(Furniture):
    def __init__(self, name, weight, tp, doors):
        super().__init__(name, weight)
        self._tp = tp
        self._doors = doors


class Chair(Furniture):
    def __init__(self, name, weight, height):
        super().__init__(name, weight)
        self._height = height


class Table(Furniture):
    def __init__(self, name, weight, height, square):
        super().__init__(name, weight)
        self._height = height
        self._square = square


cl = Closet("closet", 342.56, True, 3)
chair = Chair("chair", 14, 55.6)
tb = Table("table", 34.5, 75, 10)
print(tb.get_attrs())
