# Using multiple inheritance, it is convenient to describe the belonging of objects to several different groups.
# Let's do this example.
#
# Define the classes in the program according to their hierarchy shown in the figure above:
#
# Digit, Integer, Float, Positive, Negative
#
# Each object of these classes must be created by the same type command of the form:
#
# obj = class_name(value)
#
# where value is a numeric value. In each class, you should do your own check for the correctness of the value value:
#
# - in the Digit class: value - any number;
# - in the Integer class: value - an integer;
# - in the Float class: value - real number;
# - in the Positive class: value - a positive number;
# - in the Negative class: value - a negative number.
#
# If the check fails, then an exception is generated by the command:
#
# raise TypeError('value does not match object type')
#
# After that, declare the following child classes:
#
# PrimeNumber - prime numbers; inherited from the Integer and Positive classes;
# FloatPositive - inherited from the Float and Positive classes.
#
# Create three objects of class PrimeNumber and five objects of class FloatPositive with arbitrary valid values
# ​​for them. Save all these objects as a list of digits.
#
# Then, using the isinstance() and filter() functions, form the following lists from the specified objects:
#
# lst_positive - all objects belonging to the Positive class;
# lst_float - all objects belonging to the Float class.


class Digit:
    def __init__(self, value):
        if type(value) not in (int, float):
            raise TypeError("value does not match object type")
        self.value = value


class Integer(Digit):
    def __init__(self, value):
        super().__init__(value)
        if type(value) != int:
            raise TypeError("value does not match object type")


class Float(Digit):
    def __init__(self, value):
        super().__init__(value)
        if type(value) != float:
            raise TypeError("value does not match object type")


class Positive(Digit):
    def __init__(self, value):
        super().__init__(value)
        if value < 0:
            raise TypeError("value does not match object type")


class Negative(Digit):
    def __init__(self, value):
        super().__init__(value)
        if value > 0:
            raise TypeError("value does not match object type")


class PrimeNumber(Integer, Positive):
    pass


class FloatPositive(Float, Positive):
    pass


digits = [PrimeNumber(1),
          PrimeNumber(2),
          PrimeNumber(3),
          FloatPositive(2.1),
          FloatPositive(2.2),
          FloatPositive(2.3),
          FloatPositive(2.4),
          FloatPositive(2.5)]
lst_positive = list(filter(lambda x: isinstance(x, Positive), digits))
lst_float = list(filter(lambda x: isinstance(x, Float), digits))
print()
