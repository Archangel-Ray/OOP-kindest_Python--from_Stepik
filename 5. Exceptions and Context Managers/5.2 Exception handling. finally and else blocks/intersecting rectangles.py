# Declare a class named Rect (rectangle), whose objects are created by the command:
#
# r = Rect(x, y, width, height)
#
# where x, y - coordinates of the upper left corner (any numbers);
# width, height - width and height of the rectangle (positive numbers).
# The abscissa axis (Ox) is directed to the right, the ordinate axis (Oy) is directed downward.
#
# In each object of class Rect, local attributes should be formed with names: _x, _y, _width, _height
# and corresponding values. If the passed arguments x, y (not numbers) and width, height are not positive numbers,
# then throw an exception with the command:
#
# raise ValueError('incorrect coordinates and parameters of the rectangle')
#
# In the Rect class, implement the method:
#
# def is_collision(self, rect): ...
#
# which checks for the intersection of the current rectangle with another (with a rect object).
# If the rectangles intersect, then an exception should be generated by the command:
#
# raise TypeError('rectangles intersect')
#
# Create several Rect class objects in the program with the following values:
#
# 0; 0; 5; 3
# 6; 0; 3; 5
# 3; 2; 4; 4
# 0; 8; 8; 1
#
# Store them in lst_rect list. Based on the lst_rect list, form another lst_not_collision list,
# in which there should be rect objects that do not intersect with any other objects in the lst_rect list.
#
# P.S. The program only needs to declare the class and the lists. You don't need to display anything on the screen.
#
# Clue. To determine the intersection of two rectangles whose sides are parallel to the coordinate axes
# (as in this feat), it is enough to check that the top edge of the first rectangle is lower than the bottom edge
# of the second, or the bottom edge of the first rectangle is higher than the top edge of the second.
# And the same for the vertical edges.


class Rect:
    def __init__(self, x, y, width, height):
        self._x = x
        self._y = y
        self._width = width
        self._height = height

    def __setattr__(self, key, value):
        if type(value) not in (int, float):
            raise ValueError("incorrect coordinates and parameters of the rectangle")
        if key in ("_width", "_height") and value <= 0:
            raise ValueError("incorrect coordinates and parameters of the rectangle")
        object.__setattr__(self, key, value)

    def is_collision(self, rect):
        if not isinstance(rect, Rect):
            raise TypeError("the argument of the is_collision method must be an object of class Rect")
        if not (self._x + self._width < rect._x
                or rect._x + rect._width < self._x
                or self._y + self._height < rect._y
                or rect._y + rect._height < self._y):
            raise TypeError("rectangles intersect")


def is_collision(r1, r2):
    try:
        r1.is_collision(r2)
    except TypeError:
        return True
    return False


lst_rect = [Rect(0, 0, 5, 3), Rect(6, 0, 3, 5), Rect(3, 2, 4, 4), Rect(0, 8, 8, 1)]
lst_not_collision = [lst_rect[i] for i in range(len(lst_rect))
                     if not any(is_collision(lst_rect[i], lst_rect[j]) for j in range(len(lst_rect)) if i != j)]
for obj in lst_not_collision:
    print(obj.__dict__)
